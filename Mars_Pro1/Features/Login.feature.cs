// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Mars_Pro1.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SignIn")]
    public partial class SignInFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Login.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "SignIn", "In order to add profile details\r\nAs a registered member\r\nSeller has to login with" +
                    " correct credentials", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I want to access Mars website")]
        [NUnit.Framework.CategoryAttribute("Home")]
        public virtual void IWantToAccessMarsWebsite()
        {
            string[] tagsOfScenario = new string[] {
                    "Home"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I want to access Mars website", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
    testRunner.Given("I Launch Chrome Browser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
    testRunner.When("I enter the Home URL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
    testRunner.And("Presses Enter key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
    testRunner.Then("Homepage should be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 12
    testRunner.And("Sign In link should appear on the Homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
    testRunner.And("Join Button should appear on the Homepage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When I enter correct credentials to SignIn I should be able to access")]
        [NUnit.Framework.CategoryAttribute("Home")]
        [NUnit.Framework.CategoryAttribute("SignIn")]
        [NUnit.Framework.TestCaseAttribute("sidra_riz@yahoo.com", "sid6638659", "Sidra", null)]
        [NUnit.Framework.TestCaseAttribute("riz.sidra@gmail.com", "askshr5710", "Sid", null)]
        public virtual void WhenIEnterCorrectCredentialsToSignInIShouldBeAbleToAccess(string emailaddress, string password, string firstname, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Home",
                    "SignIn"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("emailaddress", emailaddress);
            argumentsOfScenario.Add("password", password);
            argumentsOfScenario.Add("firstname", firstname);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When I enter correct credentials to SignIn I should be able to access", "my Profile page", tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 18
 testRunner.Given("I am on the Homepage and already have an account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 19
 testRunner.When(string.Format("I enter my {0} and {1}", emailaddress, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
 testRunner.And("Clicks on Login Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
 testRunner.Then("Redirects me to my Profile page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 22
    testRunner.And(string.Format("Then I should see the message \"Welcome\", {0}", firstname), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When I checks the RememberMe Checkbox my credentials details should be saved for " +
            "future")]
        [NUnit.Framework.CategoryAttribute("Home")]
        [NUnit.Framework.CategoryAttribute("SignIn")]
        public virtual void WhenIChecksTheRememberMeCheckboxMyCredentialsDetailsShouldBeSavedForFuture()
        {
            string[] tagsOfScenario = new string[] {
                    "Home",
                    "SignIn"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When I checks the RememberMe Checkbox my credentials details should be saved for " +
                    "future", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 31
    testRunner.Given("I entered the correct credentials", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 32
    testRunner.When("I check the Remember me? Checkbox", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
    testRunner.And("Click on SignIn button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
    testRunner.Then("Verify my credentials are showingup on next SignIn", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When I enter Incorrect Credentials an error message should be displayed")]
        [NUnit.Framework.CategoryAttribute("Home")]
        [NUnit.Framework.CategoryAttribute("SignIn")]
        [NUnit.Framework.TestCaseAttribute("sidra_riz@yahoo.com", "123456", "Invalid emailaddress or password", null)]
        [NUnit.Framework.TestCaseAttribute("sidra_riz@yahoo.com", "67*5#sdd", "Invalid emailaddress or password", null)]
        [NUnit.Framework.TestCaseAttribute("adc_123@gmail.com", "sid6638659", "Invalid emailaddress or password", null)]
        [NUnit.Framework.TestCaseAttribute("sidra_riz@yahoo.com", "", "password is mandatory", null)]
        [NUnit.Framework.TestCaseAttribute("", "", "emailaddress and password are mandatory", null)]
        [NUnit.Framework.TestCaseAttribute("", "sid6638659", "emailaddress is mandatory", null)]
        [NUnit.Framework.TestCaseAttribute("sidra_riz@yahoo.com", "sid6628659", "Invalid emailaddress or password", null)]
        [NUnit.Framework.TestCaseAttribute("sidra-riz@yahoo.com", "sid6638659", "Invalid emailaddress or password", null)]
        [NUnit.Framework.TestCaseAttribute("$%#@#$sidra_riz@yahoo.com", "%#*#**#sid6638659", "Invalid emailaddress or password", null)]
        [NUnit.Framework.TestCaseAttribute("SIDRA_RIZ@YAHOO.COM", "SID6638659", "Invalid emailaddress or password", null)]
        public virtual void WhenIEnterIncorrectCredentialsAnErrorMessageShouldBeDisplayed(string emailaddress, string password, string errorMesage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Home",
                    "SignIn"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("emailaddress", emailaddress);
            argumentsOfScenario.Add("password", password);
            argumentsOfScenario.Add("error mesage", errorMesage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When I enter Incorrect Credentials an error message should be displayed", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 38
    testRunner.Given(string.Format("I enter {0} and {1} into the application", emailaddress, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 39
    testRunner.When("I click the Login Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 40
    testRunner.Then("I should be informed that login is unsuccessful by an <error message>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("On filling my details on Joining form my new account should be created")]
        [NUnit.Framework.CategoryAttribute("Home")]
        [NUnit.Framework.CategoryAttribute("Join")]
        [NUnit.Framework.TestCaseAttribute("123456", "Rizvi", "sidra_riz@yahoo.com", "sid6638659", "sid6638659", "Names must contain at least one letter", null)]
        [NUnit.Framework.TestCaseAttribute("#$%@#", "Rizvi", "sidra_riz@yahoo.com", "sid6638659", "sid6638659", "Names must contain at least one letter", null)]
        [NUnit.Framework.TestCaseAttribute("", "Rizvi", "sidra_riz@yahoo.com", "sid6638659", "sid6638659", "This is a required field", null)]
        [NUnit.Framework.TestCaseAttribute("123$@^", "Rizvi", "sidra_riz@yahoo.com", "sid6638659", "sid6638659", "Names must contain at least one letter", null)]
        [NUnit.Framework.TestCaseAttribute("Sidra", "Rizvi", "sidra_riz@yahoo.com", "sid6638659", "sid6638659", "Registeration sucessful", null)]
        [NUnit.Framework.TestCaseAttribute("Sidra", "Rizvi", "sidra_riz@yahoo.com", "sid6638659", "sid6638659", "This name has already been used to register an account", null)]
        [NUnit.Framework.TestCaseAttribute("Sidra", "123456", "sidra_riz@yahoo.com", "sid6638659", "sid6638659", "Names must contain at least one letter", null)]
        [NUnit.Framework.TestCaseAttribute("Sidra", "#$%@#", "sidra_riz@yahoo.com", "sid6638659", "sid6638659", "Names must contain at least one letter", null)]
        [NUnit.Framework.TestCaseAttribute("Sidra", "123$@^", "sidra_riz@yahoo.com", "sid6638659", "sid6638659", "Names must contain at least one letter", null)]
        [NUnit.Framework.TestCaseAttribute("Sidra", "", "sidra_riz@yahoo.com", "sid6638659", "sid6638659", "This is a required field", null)]
        [NUnit.Framework.TestCaseAttribute("Sidra", "Rizvi", "sidra_riz@yahoo.com", "sid6638659", "sid6638659", "This email has already been used to register an account", null)]
        [NUnit.Framework.TestCaseAttribute("Sidra", "Rizvi", "abcd@123.com", "123456", "123456", "This email is not valid", null)]
        [NUnit.Framework.TestCaseAttribute("Sidra", "Rizvi", "abcd123.com", "123456", "123456", "Please enter a valid email address", null)]
        [NUnit.Framework.TestCaseAttribute("Sidra", "Rizvi", "", "123456", "123456", "This is a required field", null)]
        [NUnit.Framework.TestCaseAttribute("Sidra", "Rizvi", "sidra_riz@yahoo.com", "12345", "12345", "Password must be at least 6 characters", null)]
        [NUnit.Framework.TestCaseAttribute("Sidra", "Rizvi", "sidra_riz@yahoo.com", "", "", "These fields are required", null)]
        [NUnit.Framework.TestCaseAttribute("Sidra", "Rizvi", "sidra_riz@yahoo.com", "1234567", "123456", "password does not match password", null)]
        [NUnit.Framework.TestCaseAttribute("Sidra", "Rizvi", "sidr_riz@yahoo.com", "123&*%", "123&*%", "Registeration sucessful", null)]
        [NUnit.Framework.TestCaseAttribute("Sidra", "Rizvi", "sidra_riz@yahoo.com", "123456", "1234567", "Does not match password", null)]
        public virtual void OnFillingMyDetailsOnJoiningFormMyNewAccountShouldBeCreated(string firstname, string lastname, string emailaddress, string password, string confirmpassword, string message, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Home",
                    "Join"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("firstname", firstname);
            argumentsOfScenario.Add("lastname", lastname);
            argumentsOfScenario.Add("emailaddress", emailaddress);
            argumentsOfScenario.Add("password", password);
            argumentsOfScenario.Add("confirmpassword", confirmpassword);
            argumentsOfScenario.Add("message", message);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("On filling my details on Joining form my new account should be created", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 58
   testRunner.Given("I am on Join page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 59
   testRunner.When(string.Format("I complete the form with {0} {1} {2} {3} and {4} details", firstname, lastname, emailaddress, password, confirmpassword), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 60
   testRunner.And("Check the Terms and conditions box", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
   testRunner.And("I Clicks the Join button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
   testRunner.Then(string.Format("{0} should be displaed", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 63
   testRunner.And("Directed to the Profile page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When I am on Join page and want to SignIn instead of creating an account then Sig" +
            "nIn page should be available.")]
        [NUnit.Framework.CategoryAttribute("Home")]
        [NUnit.Framework.CategoryAttribute("Join")]
        [NUnit.Framework.CategoryAttribute("SignIn")]
        public virtual void WhenIAmOnJoinPageAndWantToSignInInsteadOfCreatingAnAccountThenSignInPageShouldBeAvailable_()
        {
            string[] tagsOfScenario = new string[] {
                    "Home",
                    "Join",
                    "SignIn"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When I am on Join page and want to SignIn instead of creating an account then Sig" +
                    "nIn page should be available.", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 89
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 91
   testRunner.Given("I am on Join page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 92
   testRunner.And("SignIn link is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 93
   testRunner.When("I Click on SignIn link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 94
   testRunner.Then("Directs me to the SignIn page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When I forget my password then Forgot password Link should be available to reset " +
            "it")]
        [NUnit.Framework.CategoryAttribute("Home")]
        [NUnit.Framework.CategoryAttribute("ForgotmyPassword")]
        public virtual void WhenIForgetMyPasswordThenForgotPasswordLinkShouldBeAvailableToResetIt()
        {
            string[] tagsOfScenario = new string[] {
                    "Home",
                    "ForgotmyPassword"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When I forget my password then Forgot password Link should be available to reset " +
                    "it", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 97
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 99
    testRunner.Given("I Click on Forgot password link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 100
    testRunner.And("Email Verification page is loaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 101
    testRunner.When("I enter the valid email address", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 102
    testRunner.And("Click on Send Verification Email button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
    testRunner.Then("password reset email should be sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 104
    testRunner.And("\"Email has been sent\" message should be displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 105
    testRunner.And("Verify Email is delivered to the correct email address", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When I am on Forgot password page I should be directed to Signin page on recallin" +
            "g password.")]
        [NUnit.Framework.CategoryAttribute("Home")]
        [NUnit.Framework.CategoryAttribute("ForgotmyPassword")]
        [NUnit.Framework.CategoryAttribute("SignIn")]
        public virtual void WhenIAmOnForgotPasswordPageIShouldBeDirectedToSigninPageOnRecallingPassword_()
        {
            string[] tagsOfScenario = new string[] {
                    "Home",
                    "ForgotmyPassword",
                    "SignIn"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When I am on Forgot password page I should be directed to Signin page on recallin" +
                    "g password.", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 108
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 110
    testRunner.Given("I am on Forgot password link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 111
    testRunner.When("I Click Remember your password link?", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 112
    testRunner.Then("I should be directed to SignIn page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When I click on Signout I should be Successfully Signout from the application")]
        [NUnit.Framework.CategoryAttribute("Home")]
        [NUnit.Framework.CategoryAttribute("Profile")]
        [NUnit.Framework.CategoryAttribute("Signout")]
        public virtual void WhenIClickOnSignoutIShouldBeSuccessfullySignoutFromTheApplication()
        {
            string[] tagsOfScenario = new string[] {
                    "Home",
                    "Profile",
                    "Signout"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When I click on Signout I should be Successfully Signout from the application", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 115
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 116
 testRunner.Given("I am on Profile Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 117
    testRunner.And("SignOut page is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 118
    testRunner.When("I Click SignOut Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 119
 testRunner.Then("I should be Signout successfully from the application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I should be getting the same view on accessing Mars from different versions of Ch" +
            "rome browser")]
        [NUnit.Framework.CategoryAttribute("Home")]
        [NUnit.Framework.CategoryAttribute("SignIn")]
        [NUnit.Framework.CategoryAttribute("CrossbrowerTesting")]
        [NUnit.Framework.TestCaseAttribute("95.0.4638", null)]
        [NUnit.Framework.TestCaseAttribute("96.0.4664", null)]
        [NUnit.Framework.TestCaseAttribute("97.0.4692", null)]
        [NUnit.Framework.TestCaseAttribute("98", null)]
        public virtual void IShouldBeGettingTheSameViewOnAccessingMarsFromDifferentVersionsOfChromeBrowser(string version, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Home",
                    "SignIn",
                    "CrossbrowerTesting"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("version", version);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I should be getting the same view on accessing Mars from different versions of Ch" +
                    "rome browser", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 122
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 124
     testRunner.Given("I have installed the correct chrome browser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 125
     testRunner.When(string.Format("I enter Home URL in chrome browser of {0}", version), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 126
     testRunner.And("Presses the Enter Key", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 127
     testRunner.Then("The Login feature should work the same way in all web version", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When I enter URl, the Login screen should be loaded within the defined time")]
        [NUnit.Framework.CategoryAttribute("Home")]
        [NUnit.Framework.CategoryAttribute("SignIn")]
        [NUnit.Framework.CategoryAttribute("PerformanceTesting")]
        public virtual void WhenIEnterURlTheLoginScreenShouldBeLoadedWithinTheDefinedTime()
        {
            string[] tagsOfScenario = new string[] {
                    "Home",
                    "SignIn",
                    "PerformanceTesting"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When I enter URl, the Login screen should be loaded within the defined time", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 137
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 139
    testRunner.Given("I have installed correct browser version", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 140
    testRunner.When("I enter the Home URL and presses Enter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 141
    testRunner.Then("Home Page should be loaded within standard time of 5-10 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("When I Sign In from my Mobile/Desktop/Tablet, application should work properly in" +
            " differen platforms")]
        [NUnit.Framework.CategoryAttribute("Home")]
        [NUnit.Framework.CategoryAttribute("SignIn")]
        [NUnit.Framework.CategoryAttribute("CompatabilityTesting")]
        public virtual void WhenISignInFromMyMobileDesktopTabletApplicationShouldWorkProperlyInDifferenPlatforms()
        {
            string[] tagsOfScenario = new string[] {
                    "Home",
                    "SignIn",
                    "CompatabilityTesting"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When I Sign In from my Mobile/Desktop/Tablet, application should work properly in" +
                    " differen platforms", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 144
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 146
 testRunner.Given("User has installed correct browser version and other prerequist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 147
 testRunner.When("User is Logging in from different platforms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 148
 testRunner.Then("Login functionality should work properly the same", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
